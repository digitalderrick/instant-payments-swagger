swagger: '2.0'
info:
  description: API for initializing SEPA Instant payments
  version: '1.0'
  title: SEPA Instant REST API
  termsOfService: Terms of service
  contact:
    name: sentenial
    url: http://sentenial.com
    email: engineering@sentenial.com
  license:
    name: License of API
    url: https://www.nuapay.com/
  x-logo:
    url: './docs/imgs/ip_logo_1.png'
host: api.nuapay.com
basePath: "/"

tags:
  - name: Introduction
    description: |-
      Sentenial's Origix Instant Payments module allows financial institutions / PSPs to process near instantaneous payments using our powerful Application Programming Interface (API).

      Built on a light-weight payments architecture, the solution has been designed specifically to support instant payments and multiple payment schemes. Currently the solution supports the EBA RT1 Clearing and Settlement Mechanism (CSM) but support for TIPS, STET, FPS/NPA will be added in future. The core Origix IP functionality allows implementation of each new scheme by including CSM patches/packs to provide specific scheme flows and messaging support.

      Origix IP Instant Payments is a cloud-based, RESTful application that processes payment instructions received as API messages.

      The application works in two modes:
      * As a Receiver of inbound Payments.
      * As a Disburser of outbound Payments.
      
      Payments are cleared and settled much faster than in a traditional batch processing scheme and while specific time constraints are applied based on the payment scheme being used, in general the originating and beneficiary parties see the funds transfer completed in seconds.
      
      <div class="content-box-primary">
      <p>Origix IP Instant Payments will support numerous instant schemes in the future, currently the <a href="" target="_blank"> SEPA Credit Transfer Instant Payment Scheme</a> is fully supported.<p>
      </div>
  - name: SEPA CT Instant Scheme
    description: |-
      Origix IP offers connectivity to the SEPA Credit Transfer Instant (SCT Inst) payments scheme.

      This scheme:
      * A potential geographical scope of 34 European countries and territories.
      * Unlike the SEPA Credit Transfer or SEPA Direct Debit schemes, the SEPA Credit Transfer Instant scheme is always open: 24 x 7 x 365.
      * Currently has a maximum value of €15,000 for a single transaction .
      * In general, funds are available on the beneficiary’s account in ten seconds maximum. However the scheme allows for a hard time-out deadline, to cover exceptional processing situations. In these exceptional cases, instructions will be processed up to 20 seconds after the Originator Bank has added a Time Stamp to the instruction.
      
      The following image gives an overview of the basic SCT Inst processing flows:
      <img class="img-body" src="./docs/imgs/sipFlowOverview.png" alt="Sepa Instant Payments Overview">
  - name: Registration
    description: |-
      As part of the registration process you will be provided with the following:

      <div class="content-box-primary">
          <ul>
              <li>An API Key</li>
              <li>A Technical account (this account is created and held in Origix IP - see the <a href="https://docs.sentenialtest.com/sip-docs/Content/05%20Accounts/AccountOverview.htm" target="_blank"> Accounts</a> section for more details).</li>
          </ul>
      </div>

      You will also need to:
      <div class="content-box-primary">
          <ul>
              <li>    Provide us with one or more IP addresses from which you will be initiating your API requests.</li>
              <li>Create a <a href="" target="_blank"> Validate Account Endpoint</a>.</li>
              <li>Provide the Endpoint details to your Account Manager, allowing us to configure your Financial Institution / PSP to process<a href="" target="_blank"> Inbound Instant Payments</a>.</li>
          </ul>
      </div>
      

      *Optionally* we may provide you with logon credentials to access:
      * A view of the instant payment movements on your <a href="" target="_blank"> technical account</a>.
      * The Developer Dashboard, a user interface allowing you to configure <a href="" target="_blank"> Webhooks</a>.
      
      <div class="content-box-primary">
      <p>As <a href="" target="_blank"> CAMT.053 account statements</a> are provided to affiliates, access to your technical account via the Origix user interface may not be required. Similarly our Customer Support team can configure your Webhook Endpoint so you may not require Developer Dashboard access. Please discuss your requirements with your Account Manager.</p>
      </div>
      
  - name: API Endpoints
    description: |-

      Once you have your API key, you can send requests to the following endpoints:

      `Live: https://api.nuapay.com`

      `UAT: https://sandbox.nuapay.com/`

      Our APIs are RESTful and we use JSON format for submitting and retrieving data.

      <!-- A note on IDs: All IDs used in URIs are encoded. IDs used in request bodies are unencoded. -->

      To view all available Nuapay REST endpoints, see the [Resources](#resources) sections below.
      <aside class="notice">
      If you choose to use Java to integrate with our API, then you can make use of the <a href="https://github.com/sentenial/nuapay-rest-client" target="_blank">Nuapay Java Rest Client</a> library.  
      </aside>
  - name: Authentication
    description: |-

        Access to the API is controlled by HTTP Basic authentication. 

        Provide your API key as the basic authentication username, encoded in Base64. No password needs to be provided, however the request must be made from an allowed IP address configured in Nuapay.

        API authentication header format: 

        `Authorization: Basic Base64(<API_Key>:)`

        All API requests must be made over HTTPS, calls made over plain HTTP will fail. All API requests must be authenticated.
        
        
        <br>
        > To authorize, use this code:

        ```bash
        # With curl, you can just pass BASIC auth header 
        # (-u option) with each request
        $ curl 'https://api.nuapay.com/schemes/46pkx7o9n5/mandates' 
          -u bb09c2b6a9478720765c757a8bcadf1aa1fb31554566a21118c9c75e26c29686:
        ```
        ```java
        // With java client library use following code to set up your ApiKey
        ServiceConfiguration serviceConfig = new ServiceConfiguration();
        serviceConfig.setApiKey("bb09c2b6a9478720765c757a8bcadf1aa1fb31554566a21118c9c75e26c29686");

        RetrieveMandateResponse retrieveMandateResponse = 
          new MandateServiceDefault(serviceConfig)
            .retrieveMandate("46pkx7o9n5", "46pkx7o9n5");
        ```

        > Make sure to replace `bb09c2b6a...` with your API key.
        <br>  
  - name: Output Encoding Rules
    description: |-

      The code converts untrusted input into a safe form where the input is displayed as data to the user without executing as code in the browser.

      The implementation is based off the <a href="https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#Output_Encoding_Rules_Summary" target="_blank" >OWASP recommendations</a>.
  - name: JWS-Signature Header
    description: |- 
     
      The JWS-signature header is used to verify requests made to certain endpoints, it is generated based on the request body to be sent,
      a customer private key and X.509 certificate issued by Nuapay.

      For details on how to generate a private key and obtaining an X.509 certificate see the security section of the <a href="https://docs.nuapay.com/userdocs/Content/JsonWebSignature.htm" target="_blank" >Developer Resource</a> pages.

      The JWS-signature is required when using the following POST,
      * Create Instant Payment
 

      The JWS-signature is not required for GET endpoints.
       <br>
       > Example JWS-Signature Header

      ``` json

      JWS-Signature: eyJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCIsImlhdCIsImlzcyJdLCJraWQiOiIxNzk2NDU1MDI1IiwiaXNzIjoiT1VcdTAwM2ROdWFwYXkgQVBJLExcdTAwM2RMb25kb24sT1x1MDAzZE51YXBheSxDXHUwMDNkR0IsQ05cdTAwM2RvbWdkMzZkcG1rIiwiYWxnIjoiUlMyNTYiLCJpYXQiOjB9..wE6Cal9Hh62YKjjD4BbQpdPc1IwtteZ-ys3aiOWJDVLFdVxnJ0pEvcsK1nfRnfiiqCOB9PbapNrpG1e3jdWA3y-bm0KphLE52PEwhWZkD-x3WeFyxAeZT_Ma7Fem08k31ifMLMPYkXAyUDUfCao4DHJQHmOWQuDawYC4lH4qtiI

      ```
  - name: Returned Resources
    description: |-  
     
      All resources returned by endpoints are contained within a resource envelope.

      For single entities, the JSON envelope has the following structure:

      JSON Path | Type | Description
      ---- | ---- | -----------
      uri | String | Resource URI
      data.id | String  | Resource ID
      data.uri | String  | Resource URI
      data.* |  | Resource content


      For collections, the JSON envelope contains the following structure:

      JSON Path | Type | Description
      ---- | ---- | -----------
      uri  | String | Collection resource URI
      data | Collection  | Collection of resources
      data[].id | String  | Resource ID
      data[].uri | String  | Resource URI
      data[].* |  | Resource content
      data.page | Pagination object | Meta-data related to pagination
      data.sort | Sort object | Meta-data related to sorting (currently empty)

      <aside class="warning">
      NOTE: <strong>data.id</strong>  is a Resource ID that is used as an URI parameter. When building the URI to view or update resource the id is to be used. <strong>data.uri</strong> contains ready to use URI of the resource returned.   
      </aside>
       <br>
  - name: About Responses
    description: |-
      Every API Request will generate a HTTP Response.  This will contain a HTTP Response Code to indicate the status of the Request.  In addition certain HTTP Responses (400, 422) may generate an Error Response with an Error Code.
  - name: HTTP Status Codes
    description: |-
    
      You may encounter the following response codes. Selected response codes will contain more information to help identify problems.

      <nobr>Status Code</nobr> | Usage
      ---------- | -------
      200 | OK -- The request completed successfully.
      201 | Created -- A new resource has been created successfully. The resource is appended to the response.
      400 | Bad Request -- The request was malformed. The response body will include an error providing further information.
      401 | Unauthorized -- Your API key is wrong.
      403 | Forbidden -- The client has provided a valid Authentication header, but it does not have permission to access this resource.
      404 | Not Found -- The requested resource did not exist.
      405 | Method Not Allowed -- When a HTTP method is being requested that isn’t allowed.
      410 | Gone -- The API requested has been removed from our servers.
      412 | Precondition Failed -- Certain unmet conditions must be fulfilled before the request to be processed e.g. timestamp is too old.
      415 | Unsupported Media Type -- If incorrect content type was provided as part of the request (e.g. other than "application/json").
      422 | Unprocessable Entity -- Used for validation errors. More details will be provided in response body.
      500 | Internal Server Error -- We had a problem with our server. Try again later and if the problem persists contact the Nuapay application support team.
      501 | Not Implemented -- When the endpoint is not implemented yet.
      503 | Service Unavailable -- We're temporarially offline for maintanance. Please try again later.
  - name: Errors
    description: |- 

      Whenever an error response with status `400` or `422` is returned, the body will contain a JSON object that describes the problem. The error object has the following structure:

      Path | Type | Description
      ---- | --------- | -----------
      returnCode | String | Error Code
      returnDescription | String | Error description
      details | Array |  The object holds collection of validation errors. It is returned only for `returnCode` equal to `T0000`.
      details[].code | String | Error Code 
      details[].field | String | JSON path to request object property the error is related to
      details[].description | Error description | Human readable description of the error
      See [Error Codes](#error-codes) section for details.
  - name: Error Codes
    description: |-
      Following is the list of error codes with description as a possible return when request failed:

      Code | Description 
      ---- | ----------- 
      SI001 | Request failed, unable to process transaction
      SI002 | Invalid request body
      SI003 | Missing required header
      SI004 | Resource validation error.
      SI100 | Field is required
      SI101 | Field is invalid
      SI102 | Max amount exceeded, the maximum transaction amount defined by the scheme is {0}
      SI103 | Either categoryPurpose 'code' or 'proprietary' is allowed.
      SI104 | transactionId must be must be unique for the current date and debtor agent
      SI105 | Either ultimateDebtor 'organizationId' or 'privateId' is allowed.
      SI106 | Either ultimateCreditor 'organizationId' or 'privateId' is allowed.
      SI107 | Either 'bicOrBei' or 'other' is allowed.
      SI108 | Either 'organisationIdSchemeNameCode' or 'organisationIdSchemeNameProprietary' is allowed.
      SI109 | Either 'dateAndPlaceOfBirth' or 'other' is allowed.
      SI110 | Either 'privateIdSchemeNameCode' or 'privateIdSchemeNameProprietary' is allowed.
      SI111 | Either 'unstructured' or 'structured' is allowed.
      SI112 | Interbank Settlement amount cannot be a zero or negative value
      SI113 | Affilate configuration not found
      SI114 | Insufficient funds
      SI115 | Creditor bank BIC is not reachable for SEPA Instant Payment
      SI116 | Credit Transfer between accounts held in same bank needs to be processed internally.
      SI117 | Debtor Address is required as per Wire Transfer Regulation
  - name: Current Version
    description: |- 
      The current version of the Origix IP API is version 1.0. Changes may occur to this version of the API without a change in version number if such a change follows our backwards compatibility guidelines. Different versions will be managed via a HTTP header indicating the version of the API which the client is using.

      Requests with no version number or an unmatched version number will be treated as version 1.0 requests. 
  - name: Backwards Compatibility
    description: |-
      The following changes are considered backwards compatible:

      * Adding new API endpoints, new endpoints are independent,
      * Adding new optional request parameters to existing API calls, 
      * Adding new response properties to existing API calls. You should pay particular attention to this point if you are mapping your JSON responses to another programming language construct,
      * Changing of the property order in existing API responses,
      * Changing the length of object IDs (object IDs will never exceed 255 characters),
      * Changing the messages returned by validation or other error messages,
      * Output Encoding Rules are applied to some services and will be applied to all services in the future.
  - name: Changelog
    description: |-
      ## 2018-09-06
      * API public release.
  - name: instantpayments
x-tagGroups:
  - name: Overview
    tags:
      - Introduction
      - SEPA CT Instant Scheme
      - Registration
      - API Endpoints
  - name: Security
    tags:
      - Authentication 
      - Output Encoding Rules
      - JWS-Signature Header     
  - name: Resources
    tags:
      - Returned Resources 
  - name: APIs
    tags:
      - instantpayments
  - name: Responses
    tags:
      - About Responses
      - HTTP Status Codes
      - Errors
      - Error Codes
  - name: Versioning
    tags:
      - Current Version
      - Backwards Compatibility
  - name: Change log
    tags:
      - Changelog

    description: Service to initiate a SEPA Instant Payments.
paths:
  "/api/instantpayments":
    post:
      tags:
      - instantpayments
      summary: Sepa Instant Payments Initiation Service
      description: Endpoint that will be used to initiate SEPA instant payments in
        the SEPA Instant Payments (SIP) module.
      operationId: PostInstantPaymentsUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: paymentsRequest
        required: true
        description: Details of SEPA Instant Payment to be created.
        schema:
          "$ref": "#/definitions/paymentsRequestEnvelope"
      responses:
        '201':
          description: Payment successfully created.
          schema:
            "$ref": "#/definitions/paymentRequestResponseEnvelope"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '404':
          description: Not Found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '405':
          description: Method Not Allowed
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '406':
          description: Not Acceptable
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '422':
          description: Unprocessable Entity
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '429':
          description: Too Many Requests
          schema:
            "$ref": "#/definitions/ErrorResponse"
          headers:
            Retry-After:
              description: Number in seconds to wait
              type: integer
              format: int32
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
      security:
      - OriginatorApiKey: []
      - OriginatorOAuth2: []
  "/api/instantpayments/{instantPaymentId}":
    get:
      tags:
      - instantpayments
      summary: Service to return details of an inbound or outbound Sepa Instant Payment.
      description: Endpoint that will be used to return instant payment requests in
        the Instant Payments module (IPM).
      operationId: GetInstantPaymentsUsingGET
      consumes: []
      produces:
      - application/json
      parameters:
      - in: path
        name: instantPaymentId
        required: true
        description: Encoded ID of the instant payment resource.
        type: string
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/paymentRequestResponseEnvelope"
        '401':
          description: Unauthorized
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '404':
          description: Not Found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '405':
          description: Method Not Allowed
          schema:
            "$ref": "#/definitions/ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
      security:
      - OriginatorApiKey: []
      - OriginatorOAuth2: []
definitions:
  paymentsRequestEnvelope:
    type: object
    required:
    - paymentDetails
    properties:
      paymentDetails:
        "$ref": "#/definitions/paymentDetailsObject"
  paymentDetailsObject:
    type: object
    required:
    - interBankSettlementAmount
    - paymentIdentifiers
    - debtor
    - debtorAccount
    - creditor
    - creditorAccount
    properties:
      interBankSettlementAmount:
        type: number
        minLength: 1
        maxLength: 12
        description: The CT transaction amount.
      categoryPurpose:
        "$ref": "#/definitions/categoryPurposeObject"
      purpose:
        "$ref": "#/definitions/purposeObject"
      paymentIdentifiers:
        "$ref": "#/definitions/paymentIdentifiersObject"
      debtor:
        "$ref": "#/definitions/debtorObject"
      debtorAccount:
        "$ref": "#/definitions/debtorAccountObject"
      ultimateDebtor:
        "$ref": "#/definitions/ultimateDebtorObject"
      creditor:
        "$ref": "#/definitions/creditorObject"
      creditorAccount:
        "$ref": "#/definitions/creditorAccountObject"
      ultimateCreditor:
        "$ref": "#/definitions/ultimateCreditorObject"
      remittanceInformation:
        "$ref": "#/definitions/remittanceInformationObject"
  categoryPurposeObject:
    type: object
    properties:
      code:
        type: string
        minLength: 4
        maxLength: 4
        description: Specifies a high level purpose of the instruction based on a
          set of predefined codes. Cannot be used at the same time as 'Proprietary'.
      proprietary:
        type: string
        minLength: 1
        maxLength: 35
        description: Category Purpose Proprietary . Cannot be used at the same time
          as 'Code'.
  purposeObject:
    type: object
    properties:
      code:
        type: string
        minLength: 4
        maxLength: 4
        description: Purpose Code, ENUM based on ISO external code set 'ExternalPurpose1Code'.
  paymentIdentifiersObject:
    type: object
    required:
    - endToEndId
    - transactionId
    properties:
      endToEndId:
        type: string
        pattern: "[a-zA-Z0-9]{1,35}"
        description: The end to end ID of the CT transaction.
      transactionId:
        type: string
        pattern: "[a-zA-Z0-9]{1,35}"
        description: The transaction ID of the CT transaction.
  debtorObject:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 70
        description: The debtor name associated to the CT transaction.
      address:
        "$ref": "#/definitions/addressObject"
  addressObject:
    type: object
    properties:
      line1:
        type: string
        minLength: 1
        maxLength: 70
        description: Address line 1.
      line2:
        type: string
        minLength: 1
        maxLength: 70
        description: Address line 2.
      country:
        type: string
        minLength: 2
        maxLength: 2
        description: ISO3166-1 alpha-2 country code.
  debtorAccountObject:
    type: object
    required:
    - iban
    - bic
    properties:
      iban:
        type: string
        pattern: "[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}"
        description: The debtor account IBAN.
      bic:
        type: string
        pattern: "[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{0,3})?"
        description: The debtor account BIC.
  ultimateDebtorObject:
    type: object
    description: Defines the Ultimate Debtor associated to the transaction. Can include
      either OrgId or PrvtId
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 70
        description: The ultimate debtor name.
      organisationId:
        "$ref": "#/definitions/organisationIdObject"
      privateId:
        "$ref": "#/definitions/privateIdObject"
  creditorObject:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 70
        description: The creditor name associated to the CT transaction.
      address:
        "$ref": "#/definitions/addressObject"
  creditorAccountObject:
    type: object
    required:
    - iban
    - bic
    properties:
      iban:
        type: string
        pattern: "[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}"
        description: The creditor account IBAN.
      bic:
        type: string
        pattern: "[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{0,3})?"
        description: The creditor account BIC.
  ultimateCreditorObject:
    type: object
    properties:
      name:
        type: string
        minLength: 1
        maxLength: 70
        description: The ultimate creditor name.
      organisationId:
        "$ref": "#/definitions/organisationIdObject"
      privateId:
        "$ref": "#/definitions/privateIdObject"
  organisationIdObject:
    type: object
    description: Either 'BIC or BEI' or one occurance of 'Other' is allowed.
    properties:
      bicOrBei:
        type: string
        pattern: "[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{0,3})?"
        description: The ultimate creditor/debtor bic.
      other:
        "$ref": "#/definitions/organisationIdOtherObject"
  organisationIdOtherObject:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        minLength: 1
        maxLength: 35
        description: Organization ID Other ID
      schemeName:
        "$ref": "#/definitions/organisationIdSchemeNameObject"
      issuer:
        type: string
        minLength: 1
        maxLength: 35
        description: Organization ID Other Issuer
  organisationIdSchemeNameObject:
    type: object
    properties:
      code:
        type: string
        minLength: 4
        maxLength: 4
        description: Organization ID Scheme Name Code, ENUM based on ISO external
          code set 'ExternalOrganisationIdentification1Code'. Cannot be used at the
          same time as organisationIdSchemeNameProprietary.
      proprietary:
        type: string
        minLength: 1
        maxLength: 35
        description: Organization ID Other Scheme Name Proprietary. Cannot be used
          at the same time as organisationIdSchemeNameCode.
  privateIdObject:
    type: object
    description: Either 'Date and Place of Birth' or one occurrence of 'Other' is
      allowed.
    properties:
      dateAndPlaceOfBirth:
        "$ref": "#/definitions/dateAndPlaceOfBirth"
      other:
        "$ref": "#/definitions/privateIdOtherObject"
  dateAndPlaceOfBirth:
    type: object
    required:
    - birthDate
    - cityOfBirth
    - countryOfBirth
    properties:
      birthDate:
        type: string
        description: Ultimate Creditor/Debtor Birth Date, in format YYYY-MM-DD.
      cityOfBirth:
        type: string
        minLength: 1
        maxLength: 35
        description: City of Birth
      countryOfBirth:
        type: string
        minLength: 2
        maxLength: 2
        description: ISO3166-1 alpha-2 country code.
  privateIdOtherObject:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        minLength: 1
        maxLength: 35
        description: Private ID Other ID
      schemeName:
        "$ref": "#/definitions/privateIdSchemeNameObject"
      issuer:
        type: string
        minLength: 1
        maxLength: 35
        description: Private ID Other Issuer
  privateIdSchemeNameObject:
    type: object
    description: One instance of 'Scheme Name Code' or 'Scheme Name Proprietary' is
      allowed.
    properties:
      code:
        type: string
        minLength: 4
        maxLength: 4
        description: Private ID Scheme Name Code, ENUM based on ISO external code
          set 'ExternalPersonIdentification1Code'. Cannot be used at the same time
          as privateIdSchemeNameProprietary.
      proprietary:
        type: string
        minLength: 1
        maxLength: 35
        description: Private ID Other Scheme Name Proprietary
  remittanceInformationObject:
    type: object
    description: Either 'Unstructured' or 'Structured' Remittance Information can
      be used.
    properties:
      unstructured:
        type: string
        minLength: 1
        maxLength: 140
        description: Unstructured Remittance Information
      structured:
        "$ref": "#/definitions/structuredRemittanceObject"
  structuredRemittanceObject:
    type: object
    required:
    - creditorReferenceInfoReference
    - structuredRemittanceType
    properties:
      structuredRemittanceType:
        "$ref": "#/definitions/structuredRemittanceTypeObject"
      creditorReferenceInfoReference:
        type: string
        minLength: 1
        maxLength: 35
        description: Creditor Reference Information Reference.
  structuredRemittanceTypeObject:
    type: object
    required:
    - creditorReferenceInfoCode
    properties:
      creditorReferenceInfoCode:
        type: string
        description: Creditor reference info code.
        enum:
        - SCOR
      creditorReferenceInfoIssuer:
        type: string
        minLength: 1
        maxLength: 35
        description: Creditor Reference Information Type Issuer.
  paymentRequestResponseEnvelope:
    type: object
    required:
    - uri
    - data
    properties:
      uri:
        type: string
        description: Uri of the queried resource.
      data:
        "$ref": "#/definitions/paymentRequestResponse"
  paymentRequestResponse:
    type: object
    required:
    - id
    - uri
    - paymentType
    - paymentStatus
    - acceptanceDateTime
    - paymentDetails
    - rejectDetails
    properties:
      id:
        type: string
        description: ID of the SEPA instant trasaction resource.
      uri:
        type: string
        description: Uri of the SEPA instant transaction resource.
      paymentType:
        type: string
        description: The type of the SEPA instant payment, can be either an incoming
          or outgoing payment.
        enum:
        - INCOMING
        - OUTGOING
      paymentStatus:
        type: string
        description: The status of the SEPA Instant Payment.
        enum:
        - EXPORTED
        - REJECTED
        - ACCEPTED
        - SETTLED
      acceptanceDateTime:
        type: string
        format: date-time
        description: Acceptance date and time, for outgoing payments this is the time
          when the Pacs.008.001.02 is sent to RT1 clearing. For incoming payments
          this is the time as recieved in the incoming Pacs.008.001.02.
      paymentDetails:
        "$ref": "#/definitions/paymentResponseDetailsObject"
      rejectDetails:
        "$ref": "#/definitions/rejectDetailsObject"
  paymentResponseDetailsObject:
    type: object
    required:
    - interBankSettlementDate
    - interBankSettlementAmount
    - currency
    - paymentIdentifiers
    - debtor
    - debtorAccount
    - creditor
    - creditorAccount
    properties:
      interBankSettlementDate:
        type: string
        format: date
        description: Interbank Settlement Date, in format YYYY-MM-DD.
      interBankSettlementAmount:
        type: number
        minLength: 1
        maxLength: 12
        description: The CT transaction amount.
      currency:
        type: string
        minLength: 3
        maxLength: 3
        description: 3 letter ISO currency code.
      categoryPurpose:
        "$ref": "#/definitions/categoryPurposeObject"
      purpose:
        "$ref": "#/definitions/purposeObject"
      paymentIdentifiers:
        "$ref": "#/definitions/paymentIdentifiersObject"
      debtor:
        "$ref": "#/definitions/debtorObject"
      debtorAccount:
        "$ref": "#/definitions/debtorAccountObject"
      ultimateDebtor:
        "$ref": "#/definitions/ultimateDebtorObject"
      creditor:
        "$ref": "#/definitions/creditorObject"
      creditorAccount:
        "$ref": "#/definitions/creditorAccountObject"
      ultimateCreditor:
        "$ref": "#/definitions/ultimateCreditorObject"
      remittanceInformation:
        "$ref": "#/definitions/remittanceInformationObject"
  rejectDetailsObject:
    type: object
    description: Rejection details associated to the credit transfer.
    properties:
      rejectReason:
        type: string
        description: Reject reason code sent in the Pacs.002 from RT1 clearing.
      rejectDate:
        type: string
        format: date-time
        description: Reject reason code sent in the Pacs.002 from RT1 clearing.
  ErrorResponse:
    type: object
    properties:
      details:
        type: array
        description: Holds list of input validation errors
        items:
          "$ref": "#/definitions/ErrorDetailsItem"
      returnCode:
        type: string
        description: Error type code
      returnDescription:
        type: string
        description: Error type description
  ErrorDetailsItem:
    type: object
    properties:
      code:
        type: string
        description: Error code
      description:
        type: string
        description: Error description
      field:
        type: string
        description: JSON path to request object property the error is related to
securityDefinitions:
  OriginatorApiKey:
    type: basic
  OriginatorOAuth2:
    type: oauth2
    tokenUrl: https://api.nuapay.com/oauth/token_key
    flow: password
    scopes:
      ui: Authentication with username and password